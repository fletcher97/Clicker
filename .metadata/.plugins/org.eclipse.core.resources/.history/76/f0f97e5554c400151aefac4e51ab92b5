package com.fletcher.clicker;

import java.awt.Canvas;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;

import javax.swing.JFrame;

import com.fletcher.clicker.consol.Consol;
import com.fletcher.clicker.input.Keyboard;
import com.fletcher.clicker.input.Mouse;
import com.fletcher.clicker.level.Level;
import com.fletcher.clicker.screen.Screen;

public class Clicker extends Canvas implements Runnable{
	private static final long serialVersionUID = 1L;

	public static final int WIDTH = 600, HEIGHT = WIDTH * 9 / 16;
	
	private Thread thread;
	private boolean running = false;
	private JFrame frame;
	private Keyboard key;
	private Mouse mouse;
	private Level level;
	private Consol consol;
	private static final String TITLE = "Clicker v 0.1";
	
	private Screen screen;
	
	private BufferedImage image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
	private int[] pixels = ((DataBufferInt)image.getRaster().getDataBuffer()).getData();
	
	public static void main(String[] args) {
		
		Clicker game = new Clicker();
		
		game.frame.setResizable(false);
		game.frame.setTitle(TITLE);
		game.frame.add(game);
		game.frame.pack();
		game.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		game.frame.setLocationRelativeTo(null);
		game.frame.setVisible(true);
		
		game.start();
		
	}

	public Clicker(){
		
		Dimension size = new Dimension(WIDTH, HEIGHT);
		setPreferredSize(size);
		
		consol = new Consol(this);
		screen = new Screen(WIDTH, HEIGHT, consol);
		mouse = new Mouse();
		key = new Keyboard();
		level = new Level(key, mouse, consol);
		
	}
	
	public synchronized void start(){
	
		running = true;
		thread = new Thread(this, "Clicker");
		thread.start();
		
	}

	public synchronized void stop(){

		running = false;
		try{
			thread.join();
		}catch(InterruptedException e){
			e.printStackTrace();
		}
		
	}
	
	@Override
	public void run() {
		long lastTime = System.nanoTime();
		long timer = System.currentTimeMillis();
		final double ns = 1000000000.0 / 60.0;
		double delta = 0;
		int frames = 0;
		int updates = 0;
		requestFocus();
		
		while(running){
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;
			while(delta >= 1){
				update();
				updates++;
				delta--;
			}
			render();
			frames++;
			
			if(System.currentTimeMillis() - timer > 1000){
				
				timer += 1000;
				frame.setTitle(TITLE + "   |   " + updates + " ups, " + frames + " fps");
				frames = 0;
				updates = 0;
				
			}
		}
		stop();
	}

	private void update() {
		key.update();
		level.update();
		if(key.esc) running = false;
	}

	private void render() {
		
		BufferStrategy bs = getBufferStrategy();
		
		if(bs.equals(null)){
			createBufferStrategy(3);
			return;
		}
		
		screen.clear();
		screen.render();
		
		pixels = screen.getPixels();
		
		Graphics g = bs.getDrawGraphics();
		g.drawImage(image, 0, 0, getWidth(), getHeight(), null);
		g.dispose();
		bs.show();
		
		
	}

}
